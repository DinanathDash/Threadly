import dotenv from 'dotenv';
import express from 'express';
import cors from 'cors';
import path from 'path';
import fs from 'fs';
import http from 'http';
import https from 'https';
import { fileURLToPath } from 'url';

// Import routes
import slackRoutes from './routes/slack.js';
import diagnosticRoutes from './routes/diagnosticRoutes.js';

// Import token refresh scheduler for production
import { startTokenRefreshScheduler } from './services/tokenRefreshService.js';

// Configure dotenv
dotenv.config();

// Get __dirname equivalent in ESM
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Initialize Express app
const app = express();

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// Define routes
app.use('/api/slack', slackRoutes);
app.use('/api/diagnostic', diagnosticRoutes);

// OAuth callback route that redirects to the frontend
app.get('/oauth/callback', (req, res) => {
  const { code, error } = req.query;
  const redirectUrl = new URL('/oauth-callback', process.env.FRONTEND_URL);
  
  console.log('OAuth callback received:');
  console.log('Code:', code ? `Present (length: ${code.length})` : 'Not present');
  console.log('Error:', error || 'None');
  
  if (code) {
    // Add timestamp to prevent code reuse issues
    redirectUrl.searchParams.append('code', code);
    redirectUrl.searchParams.append('_ts', Date.now());
  }
  if (error) {
    redirectUrl.searchParams.append('error', error);
  }
  
  console.log('Redirecting to:', redirectUrl.toString());
  res.redirect(redirectUrl.toString());
});

// Health check route for SSL verification
app.get('/ssl-verify', (req, res) => {
  res.json({ 
    status: 'ok',
    timestamp: new Date().toISOString(),
    ssl: true,
    message: 'SSL certificate is working properly' 
  });
});

// Serve static files from the React app in production
if (process.env.NODE_ENV === 'production') {
  app.use(express.static(path.join(__dirname, '../dist')));
  
  app.get('*', (req, res) => {
    res.sendFile(path.join(__dirname, '../dist', 'index.html'));
  });
}

// Error handler
app.use((err, req, res, next) => {
  console.error(err.stack);
  res.status(500).json({
    status: 'error',
    message: err.message || 'Something went wrong on the server',
  });
});

// Start HTTP server
const PORT = process.env.PORT || 3001; // Changed port from 3000 to 3001
const httpServer = http.createServer(app);
httpServer.listen(PORT, () => {
  console.log(`HTTP Server running on port ${PORT}`);
  
  // Start token refresh scheduler in production
  if (process.env.NODE_ENV === 'production') {
    startTokenRefreshScheduler();
  }
});

// Start HTTPS server for local development
if (process.env.NODE_ENV === 'development') {
  try {
    const privateKey = fs.readFileSync(path.join(__dirname, 'cert', 'key.pem'), 'utf8');
    const certificate = fs.readFileSync(path.join(__dirname, 'cert', 'cert.pem'), 'utf8');
    const credentials = { key: privateKey, cert: certificate };
    
    const HTTPS_PORT = process.env.HTTPS_PORT || 3443;
    const httpsServer = https.createServer(credentials, app);
    httpsServer.listen(HTTPS_PORT, () => {
      console.log(`HTTPS Server running on port ${HTTPS_PORT}`);
    });
  } catch (error) {
    console.error('Failed to start HTTPS server:', error);
  }
}
